datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connectio
}

generator client {
    provider = "prisma-client-js"
}

// generator dbml {
//     provider = "prisma-dbml-generator"
// }

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                   String        @id @default(cuid())
    name                 String?
    email                String?       @unique
    role                 Role          @default(STUDENT)
    emailVerified        DateTime?
    image                String?
    accounts             Account[]
    sessions             Session[]
    createdMiniProjects MiniProject[]

    mentor  Mentor?
    student Student?
}

model Mentor {
    id            String          @id @default(cuid())
    user          User?           @relation(fields: [userId], references: [id])
    userId        String?         @unique
    coordinator   Batch[]
    mentorRanking MentorRanking[]
    assignedTeam  Team[]          @relation("MentorAssignedToTeam")

    department   Department? @relation(fields: [departmentId], references: [id])
    departmentId String?
}

model Student {
    id            String       @id @default(cuid())
    batch         Batch?       @relation(fields: [batchId], references: [id])
    batchId       String?
    team          Team?        @relation(fields: [teamId], references: [id])
    teamId        String?
    miniProject   MiniProject? @relation(fields: [miniProjectId], references: [id])
    miniProjectId String?
    entryNo       String       @unique

    user   User?   @relation(fields: [userId], references: [id])
    userId String? @unique
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Department {
    id             String   @id @default(cuid())
    name           String
    code           String   @unique
    mentors        Mentor[]
    batches        Batch[]
    allMentorsMail String[]
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
    
}

model MiniProject {
    id                 String    @id @default(cuid())
    name               String
    description        String?
    createdBy          User?     @relation(fields: [createdById], references: [id])
    createdById        String?
    lastDateToRegister DateTime?

    batch    Batch?
    students Student[]
    teams    Team[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Batch {
    id   String @id @default(cuid())
    year Int

    department   Department @relation(fields: [departmentId], references: [id])
    departmentId String

    miniProject   MiniProject? @relation(fields: [miniProjectId], references: [id])
    miniProjectId String?      @unique

    students      Student[]
    num_stuents   Int?
    coordinator   Mentor?   @relation(fields: [coordinatorId], references: [id])
    coordinatorId String?

    @@unique([year, departmentId])
}

model Team {
    id            String      @id @default(cuid())
    name          String?
    miniProject   MiniProject @relation(fields: [miniProjectId], references: [id])
    miniProjectId String
    members       Student[]

    mentorList       MentorRanking[]
    assignedMentor   Mentor?         @relation("MentorAssignedToTeam", fields: [assignedMentorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    assignedMentorId String?
    createdAt        DateTime        @default(now())
    updatedAt        DateTime        @updatedAt
}

model MentorRanking {
    id            String @id @default(cuid())
    mentorRanking Int
    mentor        Mentor @relation(fields: [mentorId], references: [id])
    mentorId      String @unique

    team   Team   @relation(fields: [teamId], references: [id])
    teamId String @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum Role {
    ADMIN
    MENTOR
    STUDENT
}
